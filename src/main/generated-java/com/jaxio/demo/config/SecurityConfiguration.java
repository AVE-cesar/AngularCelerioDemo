/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template angular-lab:springboot/src/main/java/config/SecurityConfiguration.p.vm.java
 */
package com.jaxio.demo.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.RememberMeServices;
import org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler;

import com.jaxio.demo.security.RestUnauthorizedEntryPoint;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
@ComponentScan(basePackages = { "com.jaxio.demo.security" })
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    public SecurityConfiguration() {
        super();
        logger.info("loading SecurityConfiguration ................................................ ");
    }

    @Autowired
    private UserDetailsService userDetailsService;

    @Autowired
    private RestUnauthorizedEntryPoint restAuthenticationEntryPoint;

    @Autowired
    private AccessDeniedHandler restAccessDeniedHandler;

    @Autowired
    private AuthenticationSuccessHandler restAuthenticationSuccessHandler;

    @Autowired
    private AuthenticationFailureHandler restAuthenticationFailureHandler;

    @Autowired
    private RememberMeServices rememberMeServices;

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService);
    }

    @Override
    public void configure(WebSecurity web) throws Exception {
        /**
         * pages or URL excluded from security mechanism
         */
        web.ignoring().antMatchers("/assets/**", "/bower_components/**", "/index.html", "/login.html", "/partials/**", "/template/**", "/", "/error/**");
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.headers().disable().csrf().disable().authorizeRequests().antMatchers("/failure").permitAll()
        /* you must be a member of admin group to go to pages below */
        .antMatchers("/v2/api-docs").hasAnyAuthority("admin").antMatchers("/users/**").hasAnyAuthority("admin").antMatchers("/h2-console/**")
                .hasAnyAuthority("admin")
                /* you must be authenticated for other pages */
                .anyRequest().authenticated().and().exceptionHandling().authenticationEntryPoint(restAuthenticationEntryPoint)
                .accessDeniedHandler(restAccessDeniedHandler).and().formLogin().loginProcessingUrl("/authenticate")
                .successHandler(restAuthenticationSuccessHandler).failureHandler(restAuthenticationFailureHandler).usernameParameter("username")
                .passwordParameter("password").permitAll().and()
                /* configure logout: When logout succeeds, we need to return ok status instead of login page redirection.
                Spring HttpStatusReturningLogoutSuccessHandler class  implements logout handler that returns ok status. */
                .logout().logoutUrl("/logout").logoutSuccessHandler(new HttpStatusReturningLogoutSuccessHandler()).deleteCookies("JSESSIONID").permitAll()
                .and().rememberMe().rememberMeServices(rememberMeServices).key(Constants.REMEMBER_ME_KEY);
    }
}
